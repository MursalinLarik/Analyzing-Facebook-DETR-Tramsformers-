# -*- coding: utf-8 -*-
"""CV Project Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-g19ZK6VtQO5Cyw4hzMeJEA-oKTuhDqb
"""

!unrar x Large.rar
!unrar x small_objects.rar

"""# Data Import and Preprocess"""

import numpy as np
import pandas as pd
import os
from statistics import mean

l_car = []
l_people = []
l_misc = []
l_error = []

path1 = 'Large'

for i in os.listdir(path1):
  if i.endswith('.csv'):
    data = pd.read_csv(path1 + '/' + i, sep = ',')
    data = data.drop(data.index[4])

    l_car.append(data["Cars Detected"] / data["Total Cars"])
    l_people.append(data["People Detected"] / data["Total People"] )
    l_misc.append(data["Miscellaneous Detected"] / data["Total Miscellaneous"])
    l_error.append(data["Error Count"] )

l_car = np.array(l_car)
l_people = np.array(l_people)
l_misc = np.array(l_misc)
l_error = np.array(l_error)

for table in l_car:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in l_people:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in l_misc:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in l_error:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0

path2 = 'Data'
car = []
people = []
misc = []
error = []

from math import inf
path2 = 'Data'

for i in os.listdir(path2):
  data = pd.read_csv(path2 + '/' + i, sep = ',')
  data = data.drop(data.index[3])

  car.append(data["Cars Detected"] / data["Total Cars"])
  people.append(data["People Detected"] / data["Total People"] )
  misc.append(data["Miscellaneous Detected"] / data["Total Miscellaneous"])
  error.append(data["Error Count"] )

car = np.array(car)
people = np.array(people)
misc = np.array(misc)
error = np.array(error)


from math import isnan

for table in car:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in people:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in misc:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0


for table in error:
  for i in range(len(table)):   
     if table[i] == inf:
       table[i] = 0

     elif isnan(table[i]):
       table[i] = 0

"""# Small Object Plots"""

import matplotlib.pyplot as plt

##################Car#########################
x = [i for i in range(len(car))]
y95 = [table[0] for table in car]
y75 = [table[1] for table in car]
ypan = [table[2] for table in car]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Car ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################People#########################
x = [i for i in range(len(people))]
y95 = [table[0] for table in people]
y75 = [table[1] for table in people]
ypan = [table[2] for table in people]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('People ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################Misc#########################
x = [i for i in range(len(misc))]
y95 = [table[0] for table in misc]
y75 = [table[1] for table in misc]
ypan = [table[2] for table in misc]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Misc ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################Error#########################
x = [i for i in range(len(error))]
y95 = [table[0] for table in error]
y75 = [table[1] for table in error]
ypan = [table[2] for table in error]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Errors')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

"""# Large Object Plots"""

import matplotlib.pyplot as plt

##################Car#########################
x = [i for i in range(len(l_car))]
y95 = [table[0] for table in l_car]
y75 = [table[1] for table in l_car]
y50 = [table[2] for table in l_car]
ypan = [table[3] for table in l_car]


plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, y50, label = "50%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Car ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################People#########################
x = [i for i in range(len(l_people))]
y95 = [table[0] for table in l_people]
y75 = [table[1] for table in l_people]
y50 = [table[2] for table in l_people]
ypan = [table[3] for table in l_people]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, y50, label = "50%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('People ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################Misc#########################
x = [i for i in range(len(l_misc))]
y95 = [table[0] for table in l_misc]
y75 = [table[1] for table in l_misc]
ypan = [table[2] for table in l_misc]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, y50, label = "50%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Misc ratio')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()


##################Error#########################
x = [i for i in range(len(l_error))]
y95 = [table[0] for table in l_error]
y75 = [table[1] for table in l_error]
ypan = [table[2] for table in l_error]

plt.axes([0, 0.2, 2.4, 0.4])
plt.plot(x, y95, label = "95%") 
plt.plot(x, y75, label = "75%")
plt.plot(x, y50, label = "50%")
plt.plot(x, ypan, label = "panoptic")

plt.xlabel('Image number')
# Set the y axis label of the current axis.
plt.ylabel('Ratio of detected to total')
# Set a title of the current axes.
plt.title('Errors')
# show a legend on the plot
plt.legend()
# Display a figure.
plt.show()

"""# Means"""

